<%- layout('layouts/main') %>

<div class="bg-white rounded-lg shadow p-6">
  <div class="flex justify-between items-center mb-6">
    <h2 class="text-2xl font-bold text-gray-900">Planowane urlopy</h2>
  </div>

  <!-- Navigation links for holiday views -->
  <div class="flex space-x-4 mb-6">
    <a href="/holidays" class="text-blue-600 font-medium hover:text-blue-800"
      >Bieżący miesiąc</a
    >
    <a
      href="/holidays/future"
      class="text-blue-600 font-medium underline hover:text-blue-800"
      >Przyszłe urlopy</a
    >
    <a
      href="/holidays/history"
      class="text-blue-600 font-medium hover:text-blue-800"
      >Historia urlopów</a
    >
    <a
      href="/holidays/employees/by-person"
      class="text-blue-600 font-medium hover:text-blue-800"
      >Urlopy pracowników</a
    >
  </div>

  <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
    <!-- Add holiday form -->
    <div>
      <h3 class="text-lg font-medium text-gray-900 mb-4">
        Dodaj przyszły urlop
      </h3>
      <form id="holiday-form" action="/holidays" method="POST" class="space-y-4" data-public-holidays='<%= JSON.stringify(publicHolidays.map(ph => ph.holiday_date)) %>'>
        <div>
          <label
            for="start_date"
            class="block text-sm font-medium text-gray-700"
            >Data początkowa</label
          >
          <input
            type="date"
            id="start_date"
            name="start_date"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm p-1.5"
            required />
        </div>
        <div>
          <label for="end_date" class="block text-sm font-medium text-gray-700"
            >Data końcowa (opcjonalnie)</label
          >
          <input
            type="date"
            id="end_date"
            name="end_date"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm p-1.5" />
          <p class="mt-1 text-sm text-gray-500">
            Pozostaw puste dla urlopu jednodniowego
          </p>
        </div>
        <button
          type="submit"
          class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-500 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
          Dodaj urlop
        </button>
      </form>
    </div>

    <!-- List of future holidays -->
    <div>
      <h3 class="text-lg font-medium text-gray-900 mb-4">
        Twoje zaplanowane urlopy
      </h3>

      <% if (futureHolidays && futureHolidays.length > 0) { %>
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th
                scope="col"
                class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Data
              </th>
              <th
                scope="col"
                class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                Akcje
              </th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            <% futureHolidays.forEach(holiday => { %>
            <tr>
              <td
                class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                <%= holiday.holiday_date %>
              </td>
              <td
                class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <form
                  action="/holidays/<%= holiday.id %>/delete"
                  method="POST"
                  class="inline"
                  onsubmit="return confirm('Czy na pewno chcesz usunąć ten urlop?');">
                  <button type="submit" class="text-red-600 hover:text-red-800">
                    Usuń
                  </button>
                </form>
              </td>
            </tr>
            <% }); %>
          </tbody>
        </table>
      </div>
      <% } else { %>
      <div class="bg-gray-50 rounded-lg p-4">
        <p class="text-gray-700">Brak zaplanowanych urlopów.</p>
      </div>
      <% } %>
    </div>
  </div>
</div>

<script>
  // Set up date dependencies for the holiday form
  document.addEventListener("DOMContentLoaded", function () {
    const startDateInput = document.getElementById("start_date");
    const endDateInput = document.getElementById("end_date");

    // Get public holidays from server data (passed via data attribute)
    const publicHolidaysData = document.getElementById('holiday-form');
    const publicHolidays = publicHolidaysData ? JSON.parse(publicHolidaysData.getAttribute('data-public-holidays') || '[]') : [];

    // Set tomorrow as the default start date
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    const tomorrowStr = tomorrow.toISOString().split("T")[0];

    if (!startDateInput.value) {
      startDateInput.value = tomorrowStr;
    }

    // Set minimum date for future holidays (tomorrow)
    const today = new Date().toISOString().split("T")[0];
    startDateInput.min = tomorrowStr;

    // Function to check if a date is a public holiday
    function isPublicHoliday(dateStr) {
      return publicHolidays.includes(dateStr);
    }

    // Function to show public holiday warning
    function showPublicHolidayWarning(input, dateStr) {
      // Remove existing warning
      const existingWarning = input.parentNode.querySelector('.public-holiday-warning');
      if (existingWarning) {
        existingWarning.remove();
      }

      // Add warning message
      const warning = document.createElement('p');
      warning.className = 'public-holiday-warning mt-1 text-sm text-red-600';
      warning.textContent = 'Ta data jest dniem ustawowo wolnym. Nie można ustawić urlopu.';
      input.parentNode.appendChild(warning);
    }

    // Function to hide public holiday warning
    function hidePublicHolidayWarning(input) {
      const existingWarning = input.parentNode.querySelector('.public-holiday-warning');
      if (existingWarning) {
        existingWarning.remove();
      }
    }

    // Validate start date
    startDateInput.addEventListener("change", function () {
      const selectedDate = startDateInput.value;
      
      if (isPublicHoliday(selectedDate)) {
        showPublicHolidayWarning(startDateInput, selectedDate);
        startDateInput.setCustomValidity('Nie można wybrać dnia ustawowo wolnego');
      } else {
        hidePublicHolidayWarning(startDateInput);
        startDateInput.setCustomValidity('');
      }

      endDateInput.min = startDateInput.value;

      // If end date is before start date, reset it
      if (endDateInput.value && endDateInput.value < startDateInput.value) {
        endDateInput.value = startDateInput.value;
      }
    });

    // Validate end date
    endDateInput.addEventListener("change", function () {
      const selectedDate = endDateInput.value;
      
      if (selectedDate && isPublicHoliday(selectedDate)) {
        showPublicHolidayWarning(endDateInput, selectedDate);
        endDateInput.setCustomValidity('Nie można wybrać dnia ustawowo wolnego');
      } else {
        hidePublicHolidayWarning(endDateInput);
        endDateInput.setCustomValidity('');
      }
    });

    // Initial setup
    if (startDateInput.value) {
      endDateInput.min = startDateInput.value;
    }
  });
</script>
