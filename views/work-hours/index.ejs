<%- layout('layouts/main') %>

<div class="bg-white rounded-lg shadow p-6">
  <div class="flex justify-between items-center mb-6">
    <h2 class="text-2xl font-bold text-gray-900">Ewidencja czasu pracy</h2>
    <div>
      <span class="text-sm text-gray-500">Dzisiaj:</span>
      <span class="ml-1 font-medium"><%= todayDate %></span>
    </div>
  </div>

  <!-- Monthly statistics -->
  <div class="mb-8 bg-gray-50 rounded-lg p-4">
    <%- include('../partials/_monthly_summary', {summaryData: monthStats,
    showHolidayLink: true }) %>
  </div>

  <!-- Two-column layout for entry form and history -->
  <div
    class="grid grid-cols-1 md:grid-cols-2 gap-4 md:divide-x md:divide-gray-300">
    <!-- Left column: Add new entry -->
    <div class="md:pr-5">
      <h3 class="text-lg font-medium text-gray-900 mb-3">Dodaj nowy wpis</h3>
      <form action="/work-hours" method="POST" class="p-3">
        <div class="mb-4">
          <label
            for="work_date"
            class="block text-sm font-medium text-gray-700 mb-1"
            >Data</label
          >
          <select
            id="work_date"
            name="work_date"
            class="focus:ring-blue-500 focus:border-blue-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md p-2"
            required>
            <% validDates.forEach(dateInfo => { %>
            <option value="<%= dateInfo.formattedDate %>">
              <%= dateInfo.label %> (<%= dateInfo.formattedDate %>)<% if (dateInfo.isWeekend) { %> - Weekend<% } %><% if (dateInfo.isPublicHoliday) { %> - Święto<% } %>
            </option>
            <% }); %>
          </select>
        </div>

        <div class="mb-6">
          <div class="flex justify-between items-center mb-4">
            <label
              for="hours_input"
              class="block text-sm font-medium text-gray-700"
              >Liczba godzin:
              <span id="hours_value" class="font-semibold">8</span></label
            >
            <div class="flex space-x-2">
              <button
                type="button"
                onclick="setHours(8)"
                class="px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded text-sm focus:outline-none focus:ring-1 focus:ring-gray-400">
                8h
              </button>
              <button
                type="button"
                onclick="setHours(9)"
                class="px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded text-sm focus:outline-none focus:ring-1 focus:ring-gray-400">
                9h
              </button>
              <button
                type="button"
                onclick="setHours(10)"
                class="px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded text-sm focus:outline-none focus:ring-1 focus:ring-gray-400">
                10h
              </button>
              <button
                type="button"
                onclick="setHours(11)"
                class="px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded text-sm focus:outline-none focus:ring-1 focus:ring-gray-400">
                11h
              </button>
              <button
                type="button"
                onclick="setHours(12)"
                class="px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded text-sm focus:outline-none focus:ring-1 focus:ring-gray-400">
                12h
              </button>
            </div>
          </div>

          <div class="mt-3">
            <div class="flex items-center justify-center">
              <button
                type="button"
                onclick="decrementHours()"
                class="bg-gray-200 hover:bg-gray-300 text-gray-700 text-sm py-2 px-4 rounded-l focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 hours-control-btn">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="h-5 w-5"
                  viewBox="0 0 20 20"
                  fill="currentColor">
                  <path
                    fill-rule="evenodd"
                    d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"
                    clip-rule="evenodd" />
                </svg>
              </button>
              <input
                type="number"
                id="hours_input"
                min="0.5"
                max="24"
                step="0.5"
                value="8"
                class="focus:ring-blue-500 focus:border-blue-500 text-center w-24 shadow-sm text-lg font-medium border-gray-300 p-2 hours-input"
                oninput="updateHoursValue(this.value)"
                onclick="this.select()" />
              <button
                type="button"
                onclick="incrementHours()"
                class="bg-gray-200 hover:bg-gray-300 text-gray-700 text-sm py-2 px-4 rounded-r focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 hours-control-btn">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="h-5 w-5"
                  viewBox="0 0 20 20"
                  fill="currentColor">
                  <path
                    fill-rule="evenodd"
                    d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
                    clip-rule="evenodd" />
                </svg>
              </button>
            </div>
          </div>

          <!-- Hidden input to actually submit the value -->
          <input
            type="hidden"
            id="total_hours"
            name="total_hours_str"
            value="8" />
        </div>

        <div class="mt-4">
          <button
            type="submit"
            class="w-full inline-flex justify-center items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-500 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
            Dodaj wpis
          </button>
        </div>
      </form>
    </div>

    <!-- Right column: Entry history -->
    <div class="md:pl-5">
      <h3 class="text-lg font-medium text-gray-900 mb-3">
        Twoje wpisy (Ostatnie 3 dni robocze)
      </h3>

      <% if (workHours && workHours.length > 0) { %>
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th
                scope="col"
                class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Data
              </th>
              <th
                scope="col"
                class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Liczba godzin
              </th>
              <th
                scope="col"
                class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                Akcje
              </th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            <% workHours.forEach(entry => { %>
            <tr id="entry-row-<%= entry.id %>">
              <td
                class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                <%= entry.weekday_name %> (<%= entry.work_date %>)
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                <%= entry.total_hours %>h
              </td>
              <td
                class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <button
                  onclick="toggleEditForm('<%= entry.id %>')"
                  class="text-blue-600 hover:text-blue-800 mr-2">
                  Edytuj
                </button>
                <form
                  action="/work-hours/<%= entry.id %>/delete"
                  method="POST"
                  class="inline"
                  onsubmit="return confirm('Czy na pewno chcesz usunąć ten wpis?');">
                  <button type="submit" class="text-red-600 hover:text-red-800">
                    Usuń
                  </button>
                </form>
              </td>
            </tr>
            <tr id="edit-form-row-<%= entry.id %>" class="hidden bg-gray-50">
              <td colspan="3" class="px-6 py-4">
                <form
                  action="/work-hours/<%= entry.id %>"
                  method="POST"
                  class="grid grid-cols-3 gap-4 items-end">
                  <div>
                    <label
                      for="edit_total_hours_<%= entry.id %>"
                      class="block text-sm font-medium text-gray-700"
                      >Liczba godzin</label
                    >
                    <input
                      type="number"
                      step="0.01"
                      id="edit_total_hours_<%= entry.id %>"
                      name="total_hours_str"
                      value="<%= entry.total_hours %>"
                      min="0.01"
                      class="mt-1 focus:ring-blue-500 focus:border-blue-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md p-2.5"
                      required />
                  </div>
                  <div class="flex space-x-2">
                    <button
                      type="submit"
                      class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-green-500 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                      Zapisz
                    </button>
                    <button
                      type="button"
                      onclick="toggleEditForm('<%= entry.id %>')"
                      class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500">
                      Anuluj
                    </button>
                  </div>
                </form>
              </td>
            </tr>
            <% }); %>
          </tbody>
        </table>
      </div>
      <% } else { %>
      <div class="p-3">
        <p class="text-gray-700">Brak wpisów dla ostatnich dni.</p>
      </div>
      <% } %>
    </div>
  </div>

  <!-- Monthly Calendar View -->
  <div class="mt-8 bg-gray-50 rounded-lg p-6">
    <div class="flex justify-between items-center mb-6">
      <h3 class="text-lg font-medium text-gray-900">
        Przegląd miesięczny - 
        <%= ['', 'Styczeń', 'Luty', 'Marzec', 'Kwiecień', 'Maj', 'Czerwiec', 
             'Lipiec', 'Sierpień', 'Wrzesień', 'Październik', 'Listopad', 'Grudzień'][currentMonth] %> <%= currentYear %>
      </h3>
      <div class="flex items-center space-x-4">
        <!-- Month Navigation -->
        <div class="flex items-center space-x-1" id="monthNavigation" 
             data-current-month="<%= currentMonth %>" data-current-year="<%= currentYear %>">
          <!-- Previous month button -->
          <button onclick="navigateMonth(-1)" 
                  class="p-2 rounded-md bg-gray-100 hover:bg-gray-200 text-gray-600">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
          </button>
          
          <!-- Previous month -->
          <a href="#" id="prevMonthBtn" 
             class="px-3 py-2 text-sm rounded-md bg-gray-100 hover:bg-gray-200 text-gray-600">
          </a>
          
          <!-- Current month -->
          <a href="#" id="currentMonthBtn" class="px-3 py-2 text-sm rounded-md font-medium">
          </a>
          
          <!-- Next month -->
          <a href="#" id="nextMonthBtn" 
             class="px-3 py-2 text-sm rounded-md bg-gray-100 hover:bg-gray-200 text-gray-600">
          </a>
          
          <!-- Next month button -->
          <button onclick="navigateMonth(1)" 
                  class="p-2 rounded-md bg-gray-100 hover:bg-gray-200 text-gray-600">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
          </button>
        </div>
      </div>
    </div>
    
    <div class="grid grid-cols-7 gap-2 mb-3">
      <!-- Week day headers -->
      <div class="bg-gray-200 rounded-lg py-2 px-1">
        <div class="text-center text-xs font-semibold text-gray-700">Pon</div>
      </div>
      <div class="bg-gray-200 rounded-lg py-2 px-1">
        <div class="text-center text-xs font-semibold text-gray-700">Wto</div>
      </div>
      <div class="bg-gray-200 rounded-lg py-2 px-1">
        <div class="text-center text-xs font-semibold text-gray-700">Śro</div>
      </div>
      <div class="bg-gray-200 rounded-lg py-2 px-1">
        <div class="text-center text-xs font-semibold text-gray-700">Czw</div>
      </div>
      <div class="bg-gray-200 rounded-lg py-2 px-1">
        <div class="text-center text-xs font-semibold text-gray-700">Pią</div>
      </div>
      <div class="bg-gray-200 rounded-lg py-2 px-1">
        <div class="text-center text-xs font-semibold text-gray-700">Sob</div>
      </div>
      <div class="bg-gray-200 rounded-lg py-2 px-1">
        <div class="text-center text-xs font-semibold text-gray-700">Nie</div>
      </div>
    </div>

    <div class="grid grid-cols-7 gap-2">
      <% 
      // Calculate empty cells for the beginning of the month
      const firstDay = new Date(currentYear, currentMonth - 1, 1);
      const firstDayOfWeek = (firstDay.getDay() + 6) % 7; // Convert to Monday = 0
      
      // Add empty cells for days before the first day of the month
      for (let i = 0; i < firstDayOfWeek; i++) { %>
        <div class="h-10"></div>
      <% } %>

      <% calendarData.forEach(day => { 
        let dayClass = 'h-10 flex items-center justify-center text-sm font-medium rounded-lg border relative ';
        let isWorkingDay = day.isWorkday; // Monday-Friday excluding public holidays and personal holidays
        
        if (day.isWeekend) {
          // Weekend - neutral gray
          dayClass += 'bg-gray-100 text-gray-500 border-gray-200';
        } else if (day.isHoliday) {
          // Personal holiday - blue
          dayClass += 'bg-blue-100 text-blue-700 border-blue-200';
        } else if (day.isPublicHoliday) {
          // Public holiday - purple
          dayClass += 'bg-purple-100 text-purple-700 border-purple-200';
        } else if (isWorkingDay) {
          // Working day (Mon-Fri, not holiday)
          dayClass += 'bg-green-100 text-green-700 border-green-200';
        } else {
          // Regular day
          dayClass += 'bg-white text-gray-700 border-gray-200';
        }
      %>
        <div class="<%= dayClass %>" title="<%= day.date %>">
          <span><%= day.day %></span>
          <% if (day.hasWorkHours) { %>
            <!-- Clock icon for days with entered hours -->
            <svg class="absolute top-1 right-1 w-3.5 h-3.5 text-blue-600" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"/>
            </svg>
          <% } else if (isWorkingDay && day.needsAttention) { %>
            <!-- Warning icon for working days without hours (past days only) -->
            <svg class="absolute top-1 right-1 w-3.5 h-3.5 text-red-600" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
            </svg>
          <% } %>
        </div>
      <% }); %>
    </div>

    <!-- Legend -->
    <div class="mt-4 flex flex-wrap gap-4 text-xs">
      <div class="flex items-center gap-2">
        <div class="w-4 h-4 bg-green-100 border border-green-200 rounded"></div>
        <span class="text-gray-600">Dni robocze</span>
      </div>
      <div class="flex items-center gap-2">
        <div class="w-4 h-4 bg-blue-100 border border-blue-200 rounded"></div>
        <span class="text-gray-600">Urlop</span>
      </div>
      <div class="flex items-center gap-2">
        <div class="w-4 h-4 bg-purple-100 border border-purple-200 rounded"></div>
        <span class="text-gray-600">Święto państwowe</span>
      </div>
      <div class="flex items-center gap-2">
        <div class="w-4 h-4 bg-gray-100 border border-gray-200 rounded"></div>
        <span class="text-gray-600">Weekend</span>
      </div>
      <div class="flex items-center gap-2">
        <svg class="w-4 h-4 text-blue-600" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"/>
        </svg>
        <span class="text-gray-600">Wpisane godziny</span>
      </div>
      <div class="flex items-center gap-2">
        <svg class="w-4 h-4 text-red-600" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
        </svg>
        <span class="text-gray-600">Brak wpisanych godzin (dni robocze)</span>
      </div>
    </div>
  </div>
</div>

<script>
  // Functions for hours input
  function updateHoursValue(value) {
    // Convert comma to dot for decimal point
    value = value.toString().replace(",", ".");

    // Parse the value - don't apply min/max constraints during typing
    let numValue = parseFloat(value);

    if (!isNaN(numValue)) {
      // Update displayed value
      document.getElementById("hours_value").textContent = numValue;
      document.getElementById("total_hours").value = numValue;
    }
  }

  function validateHoursInput() {
    const input = document.getElementById("hours_input");
    let value = parseFloat(input.value.replace(",", "."));

    // Apply min/max constraints only when leaving the field
    if (isNaN(value) || value < 0.5) {
      value = 0.5;
    } else if (value > 24) {
      value = 24;
    }

    // Round to nearest 0.5 if needed
    value = Math.round(value * 2) / 2;

    // Update all values
    document.getElementById("hours_value").textContent = value;
    document.getElementById("total_hours").value = value;
    input.value = value;
  }

  function setHours(value) {
    document.getElementById("hours_input").value = value;
    updateHoursValue(value);
  }

  function incrementHours() {
    const input = document.getElementById("hours_input");
    const currentValue = parseFloat(input.value.replace(",", ".")) || 0.5;
    const newValue = Math.min(24, currentValue + 0.5);
    input.value = newValue;
    updateHoursValue(newValue);
  }

  function decrementHours() {
    const input = document.getElementById("hours_input");
    const currentValue = parseFloat(input.value.replace(",", ".")) || 0.5;
    const newValue = Math.max(0.5, currentValue - 0.5);
    input.value = newValue;
    updateHoursValue(newValue);
  }

  function toggleEditForm(id) {
    const row = document.getElementById(`entry-row-${id}`);
    const form = document.getElementById(`edit-form-row-${id}`);
    row.classList.toggle("hidden");
    form.classList.toggle("hidden");
  }

  // Add event listener for validation when the input loses focus
  document.addEventListener("DOMContentLoaded", function () {
    const hoursInput = document.getElementById("hours_input");
    if (hoursInput) {
      hoursInput.addEventListener("blur", validateHoursInput);
    }
    
    // Initialize month navigation
    updateMonthDisplay();
  });

  // Month navigation functionality
  const selectedMonth = parseInt(document.getElementById('monthNavigation').dataset.currentMonth);
  const selectedYear = parseInt(document.getElementById('monthNavigation').dataset.currentYear);
  let displayMonth = selectedMonth;
  let displayYear = selectedYear;
  
  function getMonthName(month, year) {
    return new Date(year, month - 1, 1).toLocaleString('pl-PL', { month: 'short' });
  }
  
  function updateMonthDisplay() {
    const prevMonth = displayMonth === 1 ? 12 : displayMonth - 1;
    const prevYear = displayMonth === 1 ? displayYear - 1 : displayYear;
    const nextMonth = displayMonth === 12 ? 1 : displayMonth + 1;
    const nextYear = displayMonth === 12 ? displayYear + 1 : displayYear;
    
    // Update button texts
    document.getElementById('prevMonthBtn').textContent = getMonthName(prevMonth, prevYear) + ' ' + prevYear;
    document.getElementById('currentMonthBtn').textContent = getMonthName(displayMonth, displayYear) + ' ' + displayYear;
    document.getElementById('nextMonthBtn').textContent = getMonthName(nextMonth, nextYear) + ' ' + nextYear;
    
    // Update button links
    document.getElementById('prevMonthBtn').href = `/work-hours?month=${prevMonth}&year=${prevYear}`;
    document.getElementById('currentMonthBtn').href = `/work-hours?month=${displayMonth}&year=${displayYear}`;
    document.getElementById('nextMonthBtn').href = `/work-hours?month=${nextMonth}&year=${nextYear}`;
    
    // Update styling - highlight whichever button represents the actually selected month
    const prevBtn = document.getElementById('prevMonthBtn');
    const currentBtn = document.getElementById('currentMonthBtn');
    const nextBtn = document.getElementById('nextMonthBtn');
    
    // Reset all buttons to default styling
    const defaultClass = "px-3 py-2 text-sm bg-gray-100 hover:bg-gray-200 text-gray-600 rounded-md font-medium";
    const middleDefaultClass = "px-3 py-2 text-sm bg-gray-100 hover:bg-gray-200 text-gray-600 rounded-md font-bold";
    const selectedClass = "px-3 py-2 text-sm bg-blue-500 text-white rounded-md font-medium cursor-default";
    const selectedMiddleClass = "px-3 py-2 text-sm bg-blue-500 text-white rounded-md font-bold cursor-default";
    
    // Check which button represents the selected month and highlight it
    if (prevMonth === selectedMonth && prevYear === selectedYear) {
      prevBtn.className = selectedClass;
      prevBtn.removeAttribute('href');
      currentBtn.className = middleDefaultClass;
      nextBtn.className = defaultClass;
    } else if (displayMonth === selectedMonth && displayYear === selectedYear) {
      prevBtn.className = defaultClass;
      currentBtn.className = selectedMiddleClass;
      currentBtn.removeAttribute('href');
      nextBtn.className = defaultClass;
    } else if (nextMonth === selectedMonth && nextYear === selectedYear) {
      prevBtn.className = defaultClass;
      currentBtn.className = middleDefaultClass;
      nextBtn.className = selectedClass;
      nextBtn.removeAttribute('href');
    } else {
      // None of the visible buttons represent the selected month
      prevBtn.className = defaultClass;
      currentBtn.className = middleDefaultClass;
      nextBtn.className = defaultClass;
    }
  }
  
  function navigateMonth(direction) {
    if (direction === -1) {
      if (displayMonth === 1) {
        displayMonth = 12;
        displayYear--;
      } else {
        displayMonth--;
      }
    } else {
      if (displayMonth === 12) {
        displayMonth = 1;
        displayYear++;
      } else {
        displayMonth++;
      }
    }
    updateMonthDisplay();
  }
</script>
