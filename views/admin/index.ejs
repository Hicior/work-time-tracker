<%- layout('layouts/main') %>

<div class="container mx-auto px-4 py-8">
  <h1 class="text-3xl font-bold text-gray-900 mb-6">Panel Administratora</h1>

  <!-- Admin Navigation -->
  <div class="mb-8 flex flex-wrap gap-4">
    <% if (dbUser.isAdmin()) { %>
    <a
      href="/admin/groups"
      class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-500 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
      Zarządzaj Grupami
    </a>
    <a
      href="/admin/public-holidays"
      class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-500 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
      Zarządzaj Dniami Ustawowo Wolnymi
    </a>
    <% } %>
  </div>

  <div class="bg-white shadow-md rounded-lg overflow-hidden mb-8">
    <div
      class="px-6 py-4 bg-gray-50 border-b border-gray-200 flex justify-between items-center">
      <h2 class="text-xl font-semibold text-gray-900">
        Zarządzanie Użytkownikami
      </h2>
      <% if (dbUser.isAdmin()) { %>
      <button
        id="syncUsersBtn"
        class="inline-flex items-center px-3 py-1 border border-transparent text-xs font-medium rounded-md shadow-sm text-white bg-blue-500 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-4 w-4 mr-1"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor">
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
        </svg>
        Synchronizuj z Auth0
      </button>
      <% } %>
    </div>

    <div class="p-6">
      <div class="overflow-x-auto">
        <table class="min-w-full bg-white">
          <thead>
            <tr
              class="bg-gray-100 text-gray-600 uppercase text-sm leading-normal">
              <th class="py-3 px-6 text-left">Imię i nazwisko</th>
              <th class="py-3 px-6 text-left">Rola</th>
              <th class="py-3 px-6 text-left">Status</th>
              <th class="py-3 px-6 text-left">Grupa</th>
              <th class="py-3 px-6 text-left">Ostatnie logowanie</th>
              <% if (dbUser.isAdmin()) { %>
              <th class="py-3 px-6 text-center">Akcje</th>
              <% } %>
            </tr>
          </thead>
          <tbody class="text-gray-600 text-sm">
            <% if (users && users.length > 0) { %> <% users.forEach(user => { %>
            <tr
              class="border-b border-gray-200 hover:bg-gray-50"
              data-user-id="<%= user.id %>">
              <td class="py-3 px-6 text-left">
                <div class="flex items-center">
                  <span class="name-display"
                    ><%= user.name || user.email.split('@')[0] %></span
                  >
                  <button
                    class="edit-name-btn ml-2 text-gray-400 hover:text-blue-500 transition-colors"
                    title="Edytuj nazwę">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="h-4 w-4"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor">
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
                    </svg>
                  </button>
                  <!-- Edit form (initially hidden) -->
                  <div class="name-edit-form hidden ml-2">
                    <div class="flex">
                      <input
                        type="text"
                        class="name-input border border-gray-300 rounded px-2 py-1 text-sm w-40"
                        value="<%= user.name || user.email.split('@')[0] %>" />
                      <div class="flex flex-col ml-1 justify-center">
                        <button
                          type="button"
                          class="save-name-btn text-green-500 hover:text-green-700 mb-1"
                          title="Zapisz">
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            class="h-4 w-4"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor">
                            <path
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-width="2"
                              d="M5 13l4 4L19 7" />
                          </svg>
                        </button>
                        <button
                          type="button"
                          class="cancel-name-btn text-red-500 hover:text-red-700"
                          title="Anuluj">
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            class="h-4 w-4"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor">
                            <path
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-width="2"
                              d="M6 18L18 6M6 6l12 12" />
                          </svg>
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </td>
              <td class="py-3 px-6 text-left">
                <span
                  class="<%= user.role === 'admin' ? 'bg-blue-200 text-blue-800' : (user.role === 'manager' ? 'bg-purple-200 text-purple-800' : 'bg-green-200 text-green-800') %> py-1 px-3 rounded-full text-xs">
                  <%= user.role === 'admin' ? 'Administrator' : (user.role ===
                  'manager' ? 'Menedżer' : 'Użytkownik') %>
                </span>
              </td>
              <td class="py-3 px-6 text-left">
                <span
                  class="<%= user.is_blocked ? 'bg-red-200 text-red-800' : 'bg-green-200 text-green-800' %> py-1 px-3 rounded-full text-xs">
                  <%= user.is_blocked ? 'Zablokowany' : 'Aktywny' %>
                </span>
              </td>
              <td class="py-3 px-6 text-left">
                <% if (user.group_id && groups) { %> <% const group =
                groups.find(g => g.id === user.group_id) %> <% if (group) { %>
                <span
                  class="bg-gray-200 text-gray-800 py-1 px-3 rounded-full text-xs">
                  <%= group.name %>
                </span>
                <% } else { %> - <% } %> <% } else { %> - <% } %>
              </td>
              <td class="py-3 px-6 text-left">
                <%= new Date(user.last_login).toLocaleString('pl-PL') %>
              </td>
              <% if (dbUser.isAdmin()) { %>
              <td class="py-3 px-6 text-center">
                <div class="flex justify-evenly">
                  <form
                    action="/admin/users/<%= user.id %>/role"
                    method="POST"
                    class="inline-block">
                    <input
                      type="hidden"
                      name="role"
                      value="<%= user.role === 'admin' ? 'user' : (user.role === 'manager' ? 'admin' : 'manager') %>" />
                    <button
                      type="submit"
                      class="inline-flex items-center px-3 py-1 border border-transparent text-xs font-medium rounded-md text-white bg-yellow-500 hover:bg-yellow-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500">
                      <%= user.role === 'admin' ? 'Zmień na Użytkownika' :
                      (user.role === 'manager' ? 'Zmień na Administratora' :
                      'Zmień na Menedżera') %>
                    </button>
                  </form>

                  <button
                    data-user-id="<%= user.id %>"
                    class="toggle-block-btn inline-flex items-center px-3 py-1 border border-transparent text-xs font-medium rounded-md text-white <%= user.is_blocked ? 'bg-green-500 hover:bg-green-700' : 'bg-red-500 hover:bg-red-700' %> focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-<%= user.is_blocked ? 'green' : 'red' %>-500">
                    <%= user.is_blocked ? 'Odblokuj' : 'Zablokuj' %>
                  </button>
                </div>
              </td>
              <% } %>
            </tr>
            <% }) %> <% } else { %>
            <tr>
              <td
                colspan="<%= dbUser.isAdmin() ? 6 : 5 %>"
                class="py-8 text-center text-gray-500">
                Brak użytkowników w systemie
              </td>
            </tr>
            <% } %>
          </tbody>
        </table>
      </div>
    </div>
  </div>

  <div class="bg-white shadow-md rounded-lg overflow-hidden">
    <div class="px-6 py-4 bg-gray-50 border-b border-gray-200">
      <h2 class="text-xl font-semibold text-gray-900">Informacje o Rolach</h2>
    </div>

    <div class="p-6">
      <div class="mb-4">
        <h3 class="font-semibold text-lg mb-2 text-gray-900">Administrator</h3>
        <p class="text-gray-600">
          Administratorzy mają dostęp do wszystkich funkcji systemu, w tym
          zarządzania użytkownikami, grupami i dniami ustawowo wolnymi.
        </p>
      </div>

      <div class="mb-4">
        <h3 class="font-semibold text-lg mb-2 text-gray-900">Menedżer</h3>
        <p class="text-gray-600">
          Menedżerowie mają dostęp do większości funkcji administracyjnych, ale
          nie mogą zarządzać grupami, dniami ustawowo wolnymi ani modyfikować
          innych użytkowników.
        </p>
      </div>

      <div>
        <h3 class="font-semibold text-lg mb-2 text-gray-900">Użytkownik</h3>
        <p class="text-gray-600">
          Użytkownicy mogą zarządzać tylko swoimi godzinami pracy i urlopami.
        </p>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    // Handle sync users button
    const syncUsersBtn = document.getElementById("syncUsersBtn");
    if (syncUsersBtn) {
      syncUsersBtn.addEventListener("click", async function () {
        try {
          syncUsersBtn.disabled = true;
          syncUsersBtn.textContent = "Synchronizowanie...";

          const response = await fetch("/admin-api/sync-users", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
          });

          const result = await response.json();

          if (result.success) {
            // Show detailed sync results
            const message = `Synchronizacja zakończona!\n\nPomyślnie zsynchronizowano: ${result.result.successCount} użytkowników\nBłędy: ${result.result.failCount} użytkowników\n\nStrona zostanie odświeżona aby pokazać aktualne dane.`;
            alert(message);

            // Reload the page to show updated data
            window.location.reload();
          } else {
            alert("Błąd: " + result.message);
            syncUsersBtn.disabled = false;
            syncUsersBtn.textContent = "Synchronizuj z Auth0";
          }
        } catch (error) {
          console.error("Error syncing users:", error);
          alert("Wystąpił błąd podczas synchronizacji użytkowników.");
          syncUsersBtn.disabled = false;
          syncUsersBtn.textContent = "Synchronizuj z Auth0";
        }
      });
    }

    // Handle name editing
    const rows = document.querySelectorAll("tr[data-user-id]");
    rows.forEach((row) => {
      const userId = row.getAttribute("data-user-id");
      const nameDisplay = row.querySelector(".name-display");
      const editBtn = row.querySelector(".edit-name-btn");
      const editForm = row.querySelector(".name-edit-form");
      const nameInput = row.querySelector(".name-input");
      const saveBtn = row.querySelector(".save-name-btn");
      const cancelBtn = row.querySelector(".cancel-name-btn");

      // Show edit form when edit button is clicked
      editBtn.addEventListener("click", () => {
        nameDisplay.classList.add("hidden");
        editBtn.classList.add("hidden");
        editForm.classList.remove("hidden");
        nameInput.focus();
        nameInput.select();
      });

      // Cancel editing
      cancelBtn.addEventListener("click", () => {
        nameDisplay.classList.remove("hidden");
        editBtn.classList.remove("hidden");
        editForm.classList.add("hidden");
        // Reset input value to original
        nameInput.value = nameDisplay.textContent;
      });

      // Save name changes
      saveBtn.addEventListener("click", async () => {
        const newName = nameInput.value.trim();

        // Validate input
        if (!newName) {
          alert("Imię i nazwisko nie może być puste");
          nameInput.focus();
          return;
        }

        // Confirm change
        if (
          !confirm(
            `Czy na pewno chcesz zmienić imię i nazwisko na "${newName}"?`
          )
        ) {
          return;
        }

        try {
          saveBtn.disabled = true;
          cancelBtn.disabled = true;

          // Send update request
          const response = await fetch(
            `/admin-api/users/${userId}/update-name`,
            {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ name: newName }),
            }
          );

          const result = await response.json();

          if (result.success) {
            // Update display
            nameDisplay.textContent = newName;

            // Exit edit mode
            nameDisplay.classList.remove("hidden");
            editBtn.classList.remove("hidden");
            editForm.classList.add("hidden");

            // Show success notification if available
            if (typeof window.showNotification === "function") {
              window.showNotification(
                "Imię i nazwisko zostało zaktualizowane.",
                "success"
              );
            }
          } else {
            alert(
              `Błąd: ${result.message || "Wystąpił błąd podczas aktualizacji."}`
            );
          }
        } catch (error) {
          console.error("Error updating user name:", error);
          alert("Wystąpił błąd podczas aktualizacji imienia i nazwiska.");
        } finally {
          saveBtn.disabled = false;
          cancelBtn.disabled = false;
        }
      });

      // Handle Enter and Escape keys
      nameInput.addEventListener("keydown", (e) => {
        if (e.key === "Enter") {
          saveBtn.click();
        } else if (e.key === "Escape") {
          cancelBtn.click();
        }
      });
    });

    // Handle block/unblock buttons
    const blockBtns = document.querySelectorAll(".toggle-block-btn");
    blockBtns.forEach((btn) => {
      btn.addEventListener("click", async function () {
        const userId = this.getAttribute("data-user-id");
        const row = this.closest("tr");
        const statusElement = row.querySelector("td:nth-child(3) span");

        // Determine current blocked status from the UI
        const isCurrentlyBlocked =
          statusElement.textContent.includes("Zablokowany");
        const newBlockedStatus = !isCurrentlyBlocked;

        // Confirm the action
        const action = newBlockedStatus ? "zablokować" : "odblokować";
        const userName = row.querySelector(".name-display").textContent;

        if (
          !confirm(`Czy na pewno chcesz ${action} użytkownika "${userName}"?`)
        ) {
          return;
        }

        try {
          btn.disabled = true;
          btn.textContent = newBlockedStatus
            ? "Blokowanie..."
            : "Odblokowywanie...";

          const response = await fetch(
            `/admin-api/users/${userId}/toggle-block`,
            {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ blocked: newBlockedStatus }),
            }
          );

          const result = await response.json();

          if (result.success) {
            // Update the UI immediately
            if (newBlockedStatus) {
              statusElement.className =
                "bg-red-200 text-red-800 py-1 px-3 rounded-full text-xs";
              statusElement.textContent = "Zablokowany";
              btn.className =
                "toggle-block-btn inline-flex items-center px-3 py-1 border border-transparent text-xs font-medium rounded-md text-white bg-green-500 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500";
              btn.textContent = "Odblokuj";
            } else {
              statusElement.className =
                "bg-green-200 text-green-800 py-1 px-3 rounded-full text-xs";
              statusElement.textContent = "Aktywny";
              btn.className =
                "toggle-block-btn inline-flex items-center px-3 py-1 border border-transparent text-xs font-medium rounded-md text-white bg-red-500 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500";
              btn.textContent = "Zablokuj";
            }

            btn.disabled = false;

            // Show success notification if available
            if (typeof window.showNotification === "function") {
              const message = newBlockedStatus
                ? "Użytkownik został zablokowany."
                : "Użytkownik został odblokowany.";
              window.showNotification(message, "success");
            }
          } else {
            alert("Błąd: " + result.message);
            btn.disabled = false;
            btn.textContent = isCurrentlyBlocked ? "Odblokuj" : "Zablokuj";
          }
        } catch (error) {
          console.error("Error toggling user block status:", error);
          alert("Wystąpił błąd podczas zmiany statusu użytkownika.");
          btn.disabled = false;
          btn.textContent = isCurrentlyBlocked ? "Odblokuj" : "Zablokuj";
        }
      });
    });
  });
</script>
